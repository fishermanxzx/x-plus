@use 'sass:map';
@use 'common/var' as *;
@use 'mixins/utils' as *;
@use 'mixins/button' as *;
@use 'mixins/mixins' as *;

@include b(button) {
    @include set-component-css-var('button', $button);
}
@include b(button) {
    display: inline-flex;
    justify-content: center;
    align-items: center;
    line-height: 1;
    // min-height will expand when in flex
    height: map.get($input-height, 'default');
    white-space: nowrap;
    cursor: pointer;
    color: getCssVar('button', 'text-color');
    text-align: center;
    box-sizing: border-box;
    outline: none;
    transition: 0.1s;
    font-weight: getCssVar('button', 'font-weight');
    user-select: none;
    vertical-align: middle;
    background-color: getCssVar('button', 'bg-color');
    border: getCssVar('border');
    border-color: getCssVar('button', 'border-color');
    &:hover,
    &:focus {
        color: getCssVar('button', 'hover', 'text-color');
        border-color: getCssVar('button', 'hover', 'border-color');
        background-color: getCssVar('button', 'hover', 'bg-color');
        outline: none;
    }
    &:active {
        color: getCssVar('button', 'active', 'text-color');
        border-color: getCssVar('button', 'active', 'border-color');
        background-color: getCssVar('button', 'active', 'bg-color');
        outline: none;
    }
    &:focus-visible {
        outline: 2px solid getCssVar('button', 'outline-color');
        outline-offset: 1px;
    }
    & + & {
        margin-left: 12px;
    }

    @include button-size(
        map.get($button-padding-vertical, 'default') - $button-border-width,
        map.get($button-padding-horizontal, 'default') - $button-border-width,
        map.get($button-font-size, 'default'),
        map.get($button-border-radius, 'default')
    );

    &::-moz-focus-inner {
        border: 0;
    }

    @include when(plain) {
        @include css-var-from-global(('button', 'hover', 'text-color'), ('color', 'primary'));
        @include css-var-from-global(('button', 'hover', 'bg-color'), ('fill-color', 'blank'));
        @include css-var-from-global(('button', 'hover', 'border-color'), ('color', 'primary'));
    }

    @include when(active) {
        color: getCssVar('button', 'active', 'text-color');
        border-color: getCssVar('button', 'active', 'border-color');
        background-color: getCssVar('button', 'active', 'bg-color');
        outline: none;
    }

    @include when(disabled) {
        &,
        &:hover,
        &:focus {
            color: getCssVar('button', 'disabled', 'text-color');
            cursor: not-allowed;
            background-image: none;
            background-color: getCssVar('button', 'disabled', 'bg-color');
            border-color: getCssVar('button', 'disabled', 'border-color');
        }
    }

    @each $type in (primary, success, warning, danger, info) {
        @include m($type) {
            @include button-variant($type);
        }
    }

    @each $size in (large, small) {
        @include m($size) {
            @include set-css-var-value(('button', 'size'), map.get($input-height, $size));

            height: getCssVar('button', 'size');
            @include button-size(
                map.get($button-padding-vertical, $size) - $button-border-width,
                map.get($button-padding-horizontal, $size) - $button-border-width,
                map.get($button-font-size, $size),
                map.get($button-border-radius, $size)
            );
        }
    }
}
